---
# ====================================
# Site-Wide Deployment Playbook
# Ansible managed - do not edit manually
# ====================================

# Base System Configuration
- name: Configure base system and security
  hosts: all
  become: true
  tags: [base, security]
  roles:
    - { role: common, tags: ['common'] }
    - { role: security, tags: ['security'] }
    - { role: docker, tags: ['docker'] }
    - { role: fail2ban, tags: ['security'] }
  # - { role: firewall, tags: ['security'] }  # Role not present; commented out to prevent failure

# Monitoring & Observability Stack (placeholder - roles not yet implemented)
# - name: Deploy monitoring and observability
#   hosts: monitoring
#   become: true
#   tags: [monitoring, observability]
#   roles:
#     - { role: prometheus, tags: ['monitoring'] }
#     - { role: grafana, tags: ['monitoring', 'visualization'] }
#     - { role: loki, tags: ['logging'] }
#     - { role: promtail, tags: ['logging'] }
#     - { role: netdata, tags: ['monitoring'] }
#     - { role: alertmanager, tags: ['alerting'] }
#     - { role: blackbox_exporter, tags: ['monitoring'] }
#     - { role: node_exporter, tags: ['monitoring'] }

# Database Services (placeholder - some roles missing/not yet implemented in repo)
# - name: Deploy database infrastructure
#   hosts: databases
#   become: true
#   tags: [databases]
#   roles:
#     - { role: postgresql, tags: ['database', 'postgresql'] }
#     - { role: neo4j, tags: ['database', 'graph'] }
#     - { role: weaviate, tags: ['database', 'vector'] }
#     - { role: opensearch, tags: ['database', 'search'] }
#     - { role: redis, tags: ['database', 'cache'] }
#     - { role: rabbitmq, tags: ['messaging'] }

## Unified Application & Data Stack (Traefik, Supabase, LocalAI, RAG)
- name: Deploy unified application stack
  hosts: ai
  become: true
  tags: [app, stack]
  roles:
    - { role: traefik, tags: ['reverse-proxy'] }            # ensure network first
    - { role: supabase_stack, tags: ['supabase', 'database'] }
    - { role: local-ai, tags: ['ai', 'inference'] }
    - { role: agentic-rag, tags: ['ai', 'rag'] }

# Quick redeploy play for Traefik only
- name: Redeploy Traefik only
  hosts: ai
  become: true
  tags: [traefik-redeploy]
  roles:
    - { role: traefik, tags: ['reverse-proxy'] }

# --- Legacy Web/API Play (retained for reference; unified stack above supersedes this) ---
# - name: Deploy web and API services
#   hosts: web
#   become: true
#   tags: [web, api]
#   roles:
#     - { role: nginx, tags: ['web', 'reverse-proxy'] }
#     - { role: traefik, tags: ['web', 'reverse-proxy'] }
#     - { role: caddy, tags: ['web', 'reverse-proxy'] }
#     - { role: fastapi, tags: ['api'] }

# Logging & Analytics (placeholder)
# - name: Deploy logging and analytics
#   hosts: logging
#   become: true
#   tags: [logging, analytics]
#   roles:
#     - { role: graylog, tags: ['logging'] }
#     - { role: opensearch-dashboards, tags: ['analytics'] }
#     - { role: fluentd, tags: ['logging'] }
#     - { role: filebeat, tags: ['logging'] }

# Message Queue & Event Bus (placeholder)
# - name: Deploy messaging infrastructure
#   hosts: messaging
#   become: true
#   tags: [messaging]
#   roles:
#     - { role: rabbitmq, tags: ['message-queue'] }
#     - { role: rabbitmq-management, tags: ['monitoring'] }
#     - { role: rabbitmq-auth-backend-http, tags: ['security'] }

# AI Agent System (placeholder)
# - name: Deploy AI agent system
#   hosts: agents
#   become: true
#   tags: [ai-agents]
#   roles:
#     - { role: ai-agent-base, tags: ['ai', 'agents'] }
#     - { role: ai-agent-healing, tags: ['ai', 'self-healing'] }
#     - { role: ai-agent-optimization, tags: ['ai', 'optimization'] }
#     - { role: ai-agent-backup, tags: ['ai', 'backup'] }
#     - { role: ai-agent-monitoring, tags: ['ai', 'monitoring'] }

# Final Configuration & Validation
- name: Final system configuration and validation
  hosts: all
  become: true
  tags: [validation, final]
  tasks:
    - name: Verify service health (core subset)
      ansible.builtin.shell: |
        systemctl is-active {{ item }}
      loop:
        - docker
      register: service_status
      ignore_errors: true
      changed_when: false

    - name: Display service status
      ansible.builtin.debug:
        var: service_status

    - name: Inspect traefik_public network (if docker present)
      community.docker.docker_network_info:
        name: traefik_public
      register: traefik_public_info
      failed_when: false
      changed_when: false

    - name: Report traefik_public network existence
      ansible.builtin.debug:
        msg: >-
          {{ 'traefik_public network present with ' ~ (traefik_public_info.network.Containers | length | default(0)) ~ ' attached containers'
             if traefik_public_info.network is defined else 'traefik_public network NOT found' }}

    - name: Get Traefik container facts
      community.docker.docker_container_info:
        name: "{{ hostvars[inventory_hostname].get('traefik_container_name', 'traefik') }}"
      register: traefik_container_info
      failed_when: false
      changed_when: false

    - name: Validate Traefik container running state
      ansible.builtin.assert:
        that:
          - (traefik_container_info.exists | default(false)) | bool
          - (traefik_container_info.container.State.Running | default(false)) | bool
        fail_msg: "Traefik container not running on host"
        success_msg: "Traefik container running"
      when: traefik_container_info is defined

    - name: Check Traefik attached to traefik_public
      ansible.builtin.assert:
        that:
          - >-
            traefik_public_info.network is defined and
            (traefik_container_info.container.NetworkSettings.Networks.keys() | list) | intersect(['traefik_public']) | length > 0
        fail_msg: "Traefik not attached to traefik_public network"
        success_msg: "Traefik attached to traefik_public network"
      when: traefik_container_info.exists | default(false)

# Post-Deployment Configuration
- name: Configure service integrations
  hosts: localhost
  connection: local
  become: false
  tags: [integration]
  tasks:
  # - name: Import Grafana dashboards  # collection not installed yet
  #   community.grafana.dashboard:
  #     grafana_url: "https://{{ grafana_host }}"
  #     url_username: "{{ grafana_admin_user }}"
  #     url_password: "{{ grafana_admin_password }}"
  #     state: present
  #     overwrite: true
  #     path: "{{ playbook_dir }}/../grafana/dashboards/"
  #   register: grafana_dashboards
  #   when: grafana_import_dashboards | bool

    - name: Configure Prometheus targets
      ansible.builtin.template:
        src: "prometheus/targets.yml.j2"
        dest: "/etc/prometheus/targets.yml"
        owner: prometheus
        group: prometheus
        mode: '0644'
      notify: restart prometheus

  # - name: Configure RabbitMQ users and permissions  # collection missing
  #   community.rabbitmq.user:
  #     user: "{{ item.user }}"
  #     password: "{{ item.password }}"
  #     vhost: "{{ item.vhost | default('/') }}"
  #     configure_priv: "{{ item.configure_priv | default('.*') }}"
  #     read_priv: "{{ item.read_priv | default('.*') }}"
  #     write_priv: "{{ item.write_priv | default('.*') }}"
  #     tags: "{{ item.tags | default('management') }}"
  #     state: present
  #   loop: "{{ rabbitmq_users }}"
  #   no_log: true

# Final System Check
- name: Run system validation
  hosts: all
  become: true
  tags: [validation]
  tasks:
    - name: Check disk space
      ansible.builtin.shell: df -h /
      register: disk_space
      changed_when: false

    - name: Check memory usage
      ansible.builtin.shell: free -m
      register: memory_usage
      changed_when: false

    - name: Display system status
      ansible.builtin.debug:
        msg: |
          Disk Space:
          {{ disk_space.stdout_lines | to_nice_json }}
          
          Memory Usage:
          {{ memory_usage.stdout_lines | to_nice_json }}

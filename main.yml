---
# Deployment Tasks

- name: Create required directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    mode: "{{ item.mode | default('0755') }}"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    recurse: yes
  with_items:
    - { path: "{{ app_base_dir }}", mode: '0755' }
    - { path: "{{ app_base_dir }}/config", mode: '0750' }
    - { path: "{{ app_base_dir }}/data", mode: '0750' }
    - { path: "{{ app_log_dir }}", mode: '0755' }
    - { path: "{{ app_temp_dir }}", mode: '0750' }
  tags: [install, config]

- name: Template environment variables
  ansible.builtin.template:
    src: .env.j2
    dest: "{{ app_base_dir }}/.env"
    mode: '0640'
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
  notify: restart application
  tags: [config]

- name: Copy configuration files
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: '0640'
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
  with_items:
    - { src: 'app-config.yml.j2', dest: '{{ app_base_dir }}/config/app-config.yml' }
    - { src: 'logging-config.yml.j2', dest: '{{ app_base_dir }}/config/logging.yml' }
  notify: restart application
  tags: [config]

- name: Deploy docker-compose.yml
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ app_base_dir }}/docker-compose.yml"
    mode: '0640'
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
  register: compose_result
  notify: restart application
  tags: [config, docker]

- name: Start services using docker-compose
  community.docker.docker_compose:
    project_src: "{{ app_base_dir }}"
    files:
      - docker-compose.yml
    state: present
    pull: yes
    remove_orphans: yes
  register: compose_up_result
  tags: [deploy, docker]

- name: Wait for services to be healthy
  uri:
    url: "http://localhost:{{ item.port }}{{ item.health_path | default('/health') }}"
    method: GET
    status_code: 200
    timeout: 30
  register: health_check
  until: health_check.status == 200
  retries: 10
  delay: 10
  with_items: "{{ service_health_checks }}"
  changed_when: false
  tags: [deploy, verify]

- name: Configure service dependencies
  block:
    - name: Initialize database schemas
      ansible.builtin.command:
        cmd: "docker-compose exec -T {{ item }} {{ item }}-init"
        chdir: "{{ app_base_dir }}"
      with_items: "{{ services_requiring_init }}"
      when: compose_up_result.changed
      tags: [init]

    - name: Configure service connections
      ansible.builtin.command:
        cmd: "docker-compose exec -T {{ item }} {{ item }}-configure"
        chdir: "{{ app_base_dir }}"
      with_items: "{{ services_requiring_config }}"
      when: compose_up_result.changed
      tags: [config]
  tags: [deploy, configure]

- name: Set up initial admin accounts
  block:
    - name: Create admin user
      community.docker.docker_container_exec:
        container: "{{ app_name }}"
        command: python manage.py create_admin
        env:
          ADMIN_EMAIL: "{{ admin_email }}"
          ADMIN_PASSWORD: "{{ admin_password }}"
      no_log: true
      when: create_admin | default(false)

    - name: Configure initial permissions
      community.docker.docker_container_exec:
        container: "{{ app_name }}"
        command: python manage.py configure_permissions
      when: configure_permissions | default(false)
  tags: [deploy, admin]

- name: Verify deployment
  ansible.builtin.debug:
    msg: "All services are running and configured"
  when: health_check.results | map(attribute='status') | select('equalto', 200) | list | length == service_health_checks | length
  changed_when: false
  tags: [verify]
